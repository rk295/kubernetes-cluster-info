#!/usr/bin/env bash

kubectl get pods --all-namespaces -o json | \
jq '{ pods: [ .items[] | .metadata + .spec.containers[] + (select(.status.phase == "Running")|  .status.containerStatuses[]) | { repository: (if (.image | sub("/.*"; "")) ==  .image then "hub.docker.com" else .image | sub("/.*"; "") end) , "containerName": ( .image | sub(".*/"; "")| sub(":.*";"")), "containerVersion": ( .image | sub(".*:"; "")), "podName": .name, limitsCpu: .resources.limits.cpu, limitsMemory: .resources.limits.memory, requestsCpu: .resources.requests.cpu, requestsMemory: .resources.requests.memory, startedAt: .state.running.startedAt, namespace:.namespace } ]}' > /usr/share/nginx/html/pods.json

kubectl get svc --all-namespaces -o json | \
jq '{ svcs: [ .items[] | { Name: .metadata.name, "Created At": .metadata.creationTimestamp, Namespace: .metadata.namespace, ClusterIP: .spec.clusterIP, Port: .spec.ports[].port, "Target Port": .spec.ports[].targetPort, Protocol: .spec.ports[].protocol, Type: .spec.type, Selector: .spec.selector } ] }' > /usr/share/nginx/html/svc.json

kubectl get ing --all-namespaces -o json | \
jq '{ ings: [ .items[] | { Name: .metadata.name, "Created At": .metadata.creationTimestamp, Namespace: .metadata.namespace , "Public DNS": .metadata.annotations."external-dns.alpha.kubernetes.io/hostname", "Whitelist": .metadata.annotations."ingress.kubernetes.io/whitelist-source-range", TLS:  ( if .spec.tls[0] then "yes" else "no" end) } ] }'  > /usr/share/nginx/html/ing.json

kubectl get nodes -o json |\
jq '{ nodes:  [ .items[] | { Name: .metadata.name, "Creation Timestamp": .metadata.creationTimestamp, Hostname: .metadata.labels["kubernetes.io/hostname"], "Instance Type": .metadata.labels["beta.kubernetes.io/instance-type"], Region: .metadata.labels["failure-domain.beta.kubernetes.io/region"],"Availability Zone": .metadata.labels["failure-domain.beta.kubernetes.io/zone"], Role: .metadata.labels["kubernetes.io/role"] } ] }'  > /usr/share/nginx/html/nodes.json
